// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon.proto

#include "rcon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_referee_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_Referee_Point_referee_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rcon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_RefereeRemoteControlRequest_CardInfo_rcon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_game_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSL_Referee_Game_Event_game_5fevent_2eproto;
class SSL_RefereeRemoteControlRequest_CardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSL_RefereeRemoteControlRequest_CardInfo> _instance;
} _SSL_RefereeRemoteControlRequest_CardInfo_default_instance_;
class SSL_RefereeRemoteControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSL_RefereeRemoteControlRequest> _instance;
} _SSL_RefereeRemoteControlRequest_default_instance_;
class SSL_RefereeRemoteControlReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSL_RefereeRemoteControlReply> _instance;
} _SSL_RefereeRemoteControlReply_default_instance_;
static void InitDefaultsscc_info_SSL_RefereeRemoteControlReply_rcon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_RefereeRemoteControlReply_default_instance_;
    new (ptr) ::SSL_RefereeRemoteControlReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_RefereeRemoteControlReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_RefereeRemoteControlReply_rcon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSL_RefereeRemoteControlReply_rcon_2eproto}, {}};

static void InitDefaultsscc_info_SSL_RefereeRemoteControlRequest_rcon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_RefereeRemoteControlRequest_default_instance_;
    new (ptr) ::SSL_RefereeRemoteControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_RefereeRemoteControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SSL_RefereeRemoteControlRequest_rcon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SSL_RefereeRemoteControlRequest_rcon_2eproto}, {
      &scc_info_SSL_Referee_Point_referee_2eproto.base,
      &scc_info_SSL_RefereeRemoteControlRequest_CardInfo_rcon_2eproto.base,
      &scc_info_SSL_Referee_Game_Event_game_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_SSL_RefereeRemoteControlRequest_CardInfo_rcon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SSL_RefereeRemoteControlRequest_CardInfo_default_instance_;
    new (ptr) ::SSL_RefereeRemoteControlRequest_CardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SSL_RefereeRemoteControlRequest_CardInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SSL_RefereeRemoteControlRequest_CardInfo_rcon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SSL_RefereeRemoteControlRequest_CardInfo_rcon_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rcon_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rcon_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rcon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rcon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest_CardInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest_CardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest_CardInfo, type_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest_CardInfo, team_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, message_id_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, stage_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, command_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, designated_position_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, card_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, last_command_counter_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, implementation_id_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlRequest, gameevent_),
  4,
  5,
  6,
  1,
  2,
  7,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlReply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlReply, message_id_),
  PROTOBUF_FIELD_OFFSET(::SSL_RefereeRemoteControlReply, outcome_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::SSL_RefereeRemoteControlRequest_CardInfo)},
  { 9, 22, sizeof(::SSL_RefereeRemoteControlRequest)},
  { 30, 37, sizeof(::SSL_RefereeRemoteControlReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSL_RefereeRemoteControlRequest_CardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSL_RefereeRemoteControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SSL_RefereeRemoteControlReply_default_instance_),
};

const char descriptor_table_protodef_rcon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nrcon.proto\032\rreferee.proto\032\020game_event."
  "proto\"\266\004\n\037SSL_RefereeRemoteControlReques"
  "t\022\022\n\nmessage_id\030\001 \002(\r\022!\n\005stage\030\002 \001(\0162\022.S"
  "SL_Referee.Stage\022%\n\007command\030\003 \001(\0162\024.SSL_"
  "Referee.Command\022/\n\023designated_position\030\004"
  " \001(\0132\022.SSL_Referee.Point\0227\n\004card\030\005 \001(\0132)"
  ".SSL_RefereeRemoteControlRequest.CardInf"
  "o\022\034\n\024last_command_counter\030\006 \001(\r\022\031\n\021imple"
  "mentation_id\030\007 \001(\t\022*\n\tgameEvent\030\010 \001(\0132\027."
  "SSL_Referee_Game_Event\032\345\001\n\010CardInfo\022@\n\004t"
  "ype\030\001 \002(\01622.SSL_RefereeRemoteControlRequ"
  "est.CardInfo.CardType\022@\n\004team\030\002 \002(\01622.SS"
  "L_RefereeRemoteControlRequest.CardInfo.C"
  "ardTeam\")\n\010CardType\022\017\n\013CARD_YELLOW\020\000\022\014\n\010"
  "CARD_RED\020\001\"*\n\010CardTeam\022\017\n\013TEAM_YELLOW\020\000\022"
  "\r\n\tTEAM_BLUE\020\001\"\245\002\n\035SSL_RefereeRemoteCont"
  "rolReply\022\022\n\nmessage_id\030\001 \002(\r\0227\n\007outcome\030"
  "\002 \002(\0162&.SSL_RefereeRemoteControlReply.Ou"
  "tcome\"\266\001\n\007Outcome\022\006\n\002OK\020\000\022\024\n\020MULTIPLE_AC"
  "TIONS\020\001\022\r\n\tBAD_STAGE\020\002\022\017\n\013BAD_COMMAND\020\003\022"
  "\033\n\027BAD_DESIGNATED_POSITION\020\004\022\027\n\023BAD_COMM"
  "AND_COUNTER\020\005\022\014\n\010BAD_CARD\020\006\022\017\n\013NO_MAJORI"
  "TY\020\007\022\030\n\024COMMUNICATION_FAILED\020\010"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rcon_2eproto_deps[2] = {
  &::descriptor_table_game_5fevent_2eproto,
  &::descriptor_table_referee_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rcon_2eproto_sccs[3] = {
  &scc_info_SSL_RefereeRemoteControlReply_rcon_2eproto.base,
  &scc_info_SSL_RefereeRemoteControlRequest_rcon_2eproto.base,
  &scc_info_SSL_RefereeRemoteControlRequest_CardInfo_rcon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rcon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rcon_2eproto = {
  false, false, descriptor_table_protodef_rcon_2eproto, "rcon.proto", 910,
  &descriptor_table_rcon_2eproto_once, descriptor_table_rcon_2eproto_sccs, descriptor_table_rcon_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_rcon_2eproto::offsets,
  file_level_metadata_rcon_2eproto, 3, file_level_enum_descriptors_rcon_2eproto, file_level_service_descriptors_rcon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rcon_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rcon_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rcon_2eproto);
  return file_level_enum_descriptors_rcon_2eproto[0];
}
bool SSL_RefereeRemoteControlRequest_CardInfo_CardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::CARD_YELLOW;
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::CARD_RED;
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::CardType_MIN;
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::CardType_MAX;
constexpr int SSL_RefereeRemoteControlRequest_CardInfo::CardType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rcon_2eproto);
  return file_level_enum_descriptors_rcon_2eproto[1];
}
bool SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::TEAM_YELLOW;
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::TEAM_BLUE;
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::CardTeam_MIN;
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::CardTeam_MAX;
constexpr int SSL_RefereeRemoteControlRequest_CardInfo::CardTeam_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_RefereeRemoteControlReply_Outcome_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rcon_2eproto);
  return file_level_enum_descriptors_rcon_2eproto[2];
}
bool SSL_RefereeRemoteControlReply_Outcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::OK;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::MULTIPLE_ACTIONS;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_STAGE;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_COMMAND;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_DESIGNATED_POSITION;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_COMMAND_COUNTER;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::BAD_CARD;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::NO_MAJORITY;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::COMMUNICATION_FAILED;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::Outcome_MIN;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::Outcome_MAX;
constexpr int SSL_RefereeRemoteControlReply::Outcome_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SSL_RefereeRemoteControlRequest_CardInfo::InitAsDefaultInstance() {
}
class SSL_RefereeRemoteControlRequest_CardInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_RefereeRemoteControlRequest_CardInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SSL_RefereeRemoteControlRequest_CardInfo::SSL_RefereeRemoteControlRequest_CardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_RefereeRemoteControlRequest.CardInfo)
}
SSL_RefereeRemoteControlRequest_CardInfo::SSL_RefereeRemoteControlRequest_CardInfo(const SSL_RefereeRemoteControlRequest_CardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&type_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:SSL_RefereeRemoteControlRequest.CardInfo)
}

void SSL_RefereeRemoteControlRequest_CardInfo::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&type_)) + sizeof(team_));
}

SSL_RefereeRemoteControlRequest_CardInfo::~SSL_RefereeRemoteControlRequest_CardInfo() {
  // @@protoc_insertion_point(destructor:SSL_RefereeRemoteControlRequest.CardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSL_RefereeRemoteControlRequest_CardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SSL_RefereeRemoteControlRequest_CardInfo::ArenaDtor(void* object) {
  SSL_RefereeRemoteControlRequest_CardInfo* _this = reinterpret_cast< SSL_RefereeRemoteControlRequest_CardInfo* >(object);
  (void)_this;
}
void SSL_RefereeRemoteControlRequest_CardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSL_RefereeRemoteControlRequest_CardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_RefereeRemoteControlRequest_CardInfo& SSL_RefereeRemoteControlRequest_CardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSL_RefereeRemoteControlRequest_CardInfo_rcon_2eproto.base);
  return *internal_default_instance();
}


void SSL_RefereeRemoteControlRequest_CardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_RefereeRemoteControlRequest.CardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&type_)) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_RefereeRemoteControlRequest_CardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SSL_RefereeRemoteControlRequest_CardInfo_CardType_IsValid(val))) {
            _internal_set_type(static_cast<::SSL_RefereeRemoteControlRequest_CardInfo_CardType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_IsValid(val))) {
            _internal_set_team(static_cast<::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSL_RefereeRemoteControlRequest_CardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_RefereeRemoteControlRequest.CardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_RefereeRemoteControlRequest.CardInfo)
  return target;
}

size_t SSL_RefereeRemoteControlRequest_CardInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_RefereeRemoteControlRequest.CardInfo)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_team()) {
    // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
  }

  return total_size;
}
size_t SSL_RefereeRemoteControlRequest_CardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_RefereeRemoteControlRequest.CardInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_RefereeRemoteControlRequest_CardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_RefereeRemoteControlRequest.CardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_RefereeRemoteControlRequest_CardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSL_RefereeRemoteControlRequest_CardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_RefereeRemoteControlRequest.CardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_RefereeRemoteControlRequest.CardInfo)
    MergeFrom(*source);
  }
}

void SSL_RefereeRemoteControlRequest_CardInfo::MergeFrom(const SSL_RefereeRemoteControlRequest_CardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_RefereeRemoteControlRequest.CardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_RefereeRemoteControlRequest_CardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_RefereeRemoteControlRequest.CardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_RefereeRemoteControlRequest_CardInfo::CopyFrom(const SSL_RefereeRemoteControlRequest_CardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_RefereeRemoteControlRequest.CardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_RefereeRemoteControlRequest_CardInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SSL_RefereeRemoteControlRequest_CardInfo::InternalSwap(SSL_RefereeRemoteControlRequest_CardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_RefereeRemoteControlRequest_CardInfo, team_)
      + sizeof(SSL_RefereeRemoteControlRequest_CardInfo::team_)
      - PROTOBUF_FIELD_OFFSET(SSL_RefereeRemoteControlRequest_CardInfo, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_RefereeRemoteControlRequest_CardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSL_RefereeRemoteControlRequest::InitAsDefaultInstance() {
  ::_SSL_RefereeRemoteControlRequest_default_instance_._instance.get_mutable()->designated_position_ = const_cast< ::SSL_Referee_Point*>(
      ::SSL_Referee_Point::internal_default_instance());
  ::_SSL_RefereeRemoteControlRequest_default_instance_._instance.get_mutable()->card_ = const_cast< ::SSL_RefereeRemoteControlRequest_CardInfo*>(
      ::SSL_RefereeRemoteControlRequest_CardInfo::internal_default_instance());
  ::_SSL_RefereeRemoteControlRequest_default_instance_._instance.get_mutable()->gameevent_ = const_cast< ::SSL_Referee_Game_Event*>(
      ::SSL_Referee_Game_Event::internal_default_instance());
}
class SSL_RefereeRemoteControlRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_RefereeRemoteControlRequest>()._has_bits_);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::SSL_Referee_Point& designated_position(const SSL_RefereeRemoteControlRequest* msg);
  static void set_has_designated_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SSL_RefereeRemoteControlRequest_CardInfo& card(const SSL_RefereeRemoteControlRequest* msg);
  static void set_has_card(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_command_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_implementation_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SSL_Referee_Game_Event& gameevent(const SSL_RefereeRemoteControlRequest* msg);
  static void set_has_gameevent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::SSL_Referee_Point&
SSL_RefereeRemoteControlRequest::_Internal::designated_position(const SSL_RefereeRemoteControlRequest* msg) {
  return *msg->designated_position_;
}
const ::SSL_RefereeRemoteControlRequest_CardInfo&
SSL_RefereeRemoteControlRequest::_Internal::card(const SSL_RefereeRemoteControlRequest* msg) {
  return *msg->card_;
}
const ::SSL_Referee_Game_Event&
SSL_RefereeRemoteControlRequest::_Internal::gameevent(const SSL_RefereeRemoteControlRequest* msg) {
  return *msg->gameevent_;
}
void SSL_RefereeRemoteControlRequest::clear_designated_position() {
  if (designated_position_ != nullptr) designated_position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SSL_RefereeRemoteControlRequest::clear_gameevent() {
  if (gameevent_ != nullptr) gameevent_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SSL_RefereeRemoteControlRequest::SSL_RefereeRemoteControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_RefereeRemoteControlRequest)
}
SSL_RefereeRemoteControlRequest::SSL_RefereeRemoteControlRequest(const SSL_RefereeRemoteControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  implementation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_implementation_id()) {
    implementation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_implementation_id(),
      GetArena());
  }
  if (from._internal_has_designated_position()) {
    designated_position_ = new ::SSL_Referee_Point(*from.designated_position_);
  } else {
    designated_position_ = nullptr;
  }
  if (from._internal_has_card()) {
    card_ = new ::SSL_RefereeRemoteControlRequest_CardInfo(*from.card_);
  } else {
    card_ = nullptr;
  }
  if (from._internal_has_gameevent()) {
    gameevent_ = new ::SSL_Referee_Game_Event(*from.gameevent_);
  } else {
    gameevent_ = nullptr;
  }
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_command_counter_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(last_command_counter_));
  // @@protoc_insertion_point(copy_constructor:SSL_RefereeRemoteControlRequest)
}

void SSL_RefereeRemoteControlRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSL_RefereeRemoteControlRequest_rcon_2eproto.base);
  implementation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&designated_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_command_counter_) -
      reinterpret_cast<char*>(&designated_position_)) + sizeof(last_command_counter_));
}

SSL_RefereeRemoteControlRequest::~SSL_RefereeRemoteControlRequest() {
  // @@protoc_insertion_point(destructor:SSL_RefereeRemoteControlRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSL_RefereeRemoteControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  implementation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete designated_position_;
  if (this != internal_default_instance()) delete card_;
  if (this != internal_default_instance()) delete gameevent_;
}

void SSL_RefereeRemoteControlRequest::ArenaDtor(void* object) {
  SSL_RefereeRemoteControlRequest* _this = reinterpret_cast< SSL_RefereeRemoteControlRequest* >(object);
  (void)_this;
}
void SSL_RefereeRemoteControlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSL_RefereeRemoteControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_RefereeRemoteControlRequest& SSL_RefereeRemoteControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSL_RefereeRemoteControlRequest_rcon_2eproto.base);
  return *internal_default_instance();
}


void SSL_RefereeRemoteControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_RefereeRemoteControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      implementation_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(designated_position_ != nullptr);
      designated_position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(card_ != nullptr);
      card_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(gameevent_ != nullptr);
      gameevent_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_command_counter_) -
        reinterpret_cast<char*>(&message_id_)) + sizeof(last_command_counter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_RefereeRemoteControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_id(&has_bits);
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SSL_Referee.Stage stage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SSL_Referee_Stage_IsValid(val))) {
            _internal_set_stage(static_cast<::SSL_Referee_Stage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .SSL_Referee.Command command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SSL_Referee_Command_IsValid(val))) {
            _internal_set_command(static_cast<::SSL_Referee_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .SSL_Referee.Point designated_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_designated_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_command_counter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_last_command_counter(&has_bits);
          last_command_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string implementation_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_implementation_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SSL_RefereeRemoteControlRequest.implementation_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SSL_Referee_Game_Event gameEvent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameevent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSL_RefereeRemoteControlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_RefereeRemoteControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 message_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_id(), target);
  }

  // optional .SSL_Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stage(), target);
  }

  // optional .SSL_Referee.Command command = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_command(), target);
  }

  // optional .SSL_Referee.Point designated_position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::designated_position(this), target, stream);
  }

  // optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::card(this), target, stream);
  }

  // optional uint32 last_command_counter = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_last_command_counter(), target);
  }

  // optional string implementation_id = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_implementation_id().data(), static_cast<int>(this->_internal_implementation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SSL_RefereeRemoteControlRequest.implementation_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_implementation_id(), target);
  }

  // optional .SSL_Referee_Game_Event gameEvent = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::gameevent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_RefereeRemoteControlRequest)
  return target;
}

size_t SSL_RefereeRemoteControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_RefereeRemoteControlRequest)
  size_t total_size = 0;

  // required uint32 message_id = 1;
  if (_internal_has_message_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string implementation_id = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_implementation_id());
    }

    // optional .SSL_Referee.Point designated_position = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *designated_position_);
    }

    // optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *card_);
    }

    // optional .SSL_Referee_Game_Event gameEvent = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gameevent_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .SSL_Referee.Stage stage = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stage());
    }

    // optional .SSL_Referee.Command command = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
    }

    // optional uint32 last_command_counter = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_command_counter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_RefereeRemoteControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_RefereeRemoteControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_RefereeRemoteControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSL_RefereeRemoteControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_RefereeRemoteControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_RefereeRemoteControlRequest)
    MergeFrom(*source);
  }
}

void SSL_RefereeRemoteControlRequest::MergeFrom(const SSL_RefereeRemoteControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_RefereeRemoteControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_implementation_id(from._internal_implementation_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_designated_position()->::SSL_Referee_Point::MergeFrom(from._internal_designated_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_card()->::SSL_RefereeRemoteControlRequest_CardInfo::MergeFrom(from._internal_card());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_gameevent()->::SSL_Referee_Game_Event::MergeFrom(from._internal_gameevent());
    }
    if (cached_has_bits & 0x00000010u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      stage_ = from.stage_;
    }
    if (cached_has_bits & 0x00000040u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_command_counter_ = from.last_command_counter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_RefereeRemoteControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_RefereeRemoteControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_RefereeRemoteControlRequest::CopyFrom(const SSL_RefereeRemoteControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_RefereeRemoteControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_RefereeRemoteControlRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_designated_position()) {
    if (!designated_position_->IsInitialized()) return false;
  }
  if (_internal_has_card()) {
    if (!card_->IsInitialized()) return false;
  }
  if (_internal_has_gameevent()) {
    if (!gameevent_->IsInitialized()) return false;
  }
  return true;
}

void SSL_RefereeRemoteControlRequest::InternalSwap(SSL_RefereeRemoteControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  implementation_id_.Swap(&other->implementation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, last_command_counter_)
      + sizeof(SSL_RefereeRemoteControlRequest::last_command_counter_)
      - PROTOBUF_FIELD_OFFSET(SSL_RefereeRemoteControlRequest, designated_position_)>(
          reinterpret_cast<char*>(&designated_position_),
          reinterpret_cast<char*>(&other->designated_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_RefereeRemoteControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSL_RefereeRemoteControlReply::InitAsDefaultInstance() {
}
class SSL_RefereeRemoteControlReply::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_RefereeRemoteControlReply>()._has_bits_);
  static void set_has_message_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_outcome(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SSL_RefereeRemoteControlReply::SSL_RefereeRemoteControlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SSL_RefereeRemoteControlReply)
}
SSL_RefereeRemoteControlReply::SSL_RefereeRemoteControlReply(const SSL_RefereeRemoteControlReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&message_id_, &from.message_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&outcome_) -
    reinterpret_cast<char*>(&message_id_)) + sizeof(outcome_));
  // @@protoc_insertion_point(copy_constructor:SSL_RefereeRemoteControlReply)
}

void SSL_RefereeRemoteControlReply::SharedCtor() {
  ::memset(&message_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outcome_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(outcome_));
}

SSL_RefereeRemoteControlReply::~SSL_RefereeRemoteControlReply() {
  // @@protoc_insertion_point(destructor:SSL_RefereeRemoteControlReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSL_RefereeRemoteControlReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SSL_RefereeRemoteControlReply::ArenaDtor(void* object) {
  SSL_RefereeRemoteControlReply* _this = reinterpret_cast< SSL_RefereeRemoteControlReply* >(object);
  (void)_this;
}
void SSL_RefereeRemoteControlReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSL_RefereeRemoteControlReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSL_RefereeRemoteControlReply& SSL_RefereeRemoteControlReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSL_RefereeRemoteControlReply_rcon_2eproto.base);
  return *internal_default_instance();
}


void SSL_RefereeRemoteControlReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_RefereeRemoteControlReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&message_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&outcome_) -
        reinterpret_cast<char*>(&message_id_)) + sizeof(outcome_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_RefereeRemoteControlReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_id(&has_bits);
          message_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SSL_RefereeRemoteControlReply_Outcome_IsValid(val))) {
            _internal_set_outcome(static_cast<::SSL_RefereeRemoteControlReply_Outcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSL_RefereeRemoteControlReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_RefereeRemoteControlReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_id(), target);
  }

  // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_outcome(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_RefereeRemoteControlReply)
  return target;
}

size_t SSL_RefereeRemoteControlReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_RefereeRemoteControlReply)
  size_t total_size = 0;

  if (_internal_has_message_id()) {
    // required uint32 message_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());
  }

  if (_internal_has_outcome()) {
    // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_outcome());
  }

  return total_size;
}
size_t SSL_RefereeRemoteControlReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_RefereeRemoteControlReply)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 message_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_id());

    // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_outcome());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSL_RefereeRemoteControlReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_RefereeRemoteControlReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_RefereeRemoteControlReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSL_RefereeRemoteControlReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_RefereeRemoteControlReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_RefereeRemoteControlReply)
    MergeFrom(*source);
  }
}

void SSL_RefereeRemoteControlReply::MergeFrom(const SSL_RefereeRemoteControlReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_RefereeRemoteControlReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      outcome_ = from.outcome_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SSL_RefereeRemoteControlReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_RefereeRemoteControlReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_RefereeRemoteControlReply::CopyFrom(const SSL_RefereeRemoteControlReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_RefereeRemoteControlReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_RefereeRemoteControlReply::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SSL_RefereeRemoteControlReply::InternalSwap(SSL_RefereeRemoteControlReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_RefereeRemoteControlReply, outcome_)
      + sizeof(SSL_RefereeRemoteControlReply::outcome_)
      - PROTOBUF_FIELD_OFFSET(SSL_RefereeRemoteControlReply, message_id_)>(
          reinterpret_cast<char*>(&message_id_),
          reinterpret_cast<char*>(&other->message_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_RefereeRemoteControlReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SSL_RefereeRemoteControlRequest_CardInfo* Arena::CreateMaybeMessage< ::SSL_RefereeRemoteControlRequest_CardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_RefereeRemoteControlRequest_CardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_RefereeRemoteControlRequest* Arena::CreateMaybeMessage< ::SSL_RefereeRemoteControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_RefereeRemoteControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_RefereeRemoteControlReply* Arena::CreateMaybeMessage< ::SSL_RefereeRemoteControlReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_RefereeRemoteControlReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
