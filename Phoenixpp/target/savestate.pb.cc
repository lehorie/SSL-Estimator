// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: savestate.proto

#include "savestate.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_referee_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SSL_Referee_referee_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_savestate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveState_CardInfo_savestate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_savestate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveState_TimeoutInfo_savestate_2eproto;
class SaveState_CardInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveState_CardInfo> _instance;
} _SaveState_CardInfo_default_instance_;
class SaveState_TimeoutInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveState_TimeoutInfo> _instance;
} _SaveState_TimeoutInfo_default_instance_;
class SaveStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SaveState> _instance;
} _SaveState_default_instance_;
static void InitDefaultsscc_info_SaveState_savestate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SaveState_default_instance_;
    new (ptr) ::SaveState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SaveState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SaveState_savestate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SaveState_savestate_2eproto}, {
      &scc_info_SSL_Referee_referee_2eproto.base,
      &scc_info_SaveState_CardInfo_savestate_2eproto.base,
      &scc_info_SaveState_TimeoutInfo_savestate_2eproto.base,}};

static void InitDefaultsscc_info_SaveState_CardInfo_savestate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SaveState_CardInfo_default_instance_;
    new (ptr) ::SaveState_CardInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SaveState_CardInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveState_CardInfo_savestate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SaveState_CardInfo_savestate_2eproto}, {}};

static void InitDefaultsscc_info_SaveState_TimeoutInfo_savestate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SaveState_TimeoutInfo_default_instance_;
    new (ptr) ::SaveState_TimeoutInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SaveState_TimeoutInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SaveState_TimeoutInfo_savestate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SaveState_TimeoutInfo_savestate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_savestate_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_savestate_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_savestate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_savestate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SaveState_CardInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SaveState_CardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SaveState_CardInfo, team_),
  PROTOBUF_FIELD_OFFSET(::SaveState_CardInfo, card_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SaveState_TimeoutInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SaveState_TimeoutInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SaveState_TimeoutInfo, team_),
  PROTOBUF_FIELD_OFFSET(::SaveState_TimeoutInfo, left_before_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SaveState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SaveState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SaveState, referee_),
  PROTOBUF_FIELD_OFFSET(::SaveState, yellow_penalty_goals_),
  PROTOBUF_FIELD_OFFSET(::SaveState, blue_penalty_goals_),
  PROTOBUF_FIELD_OFFSET(::SaveState, time_taken_),
  PROTOBUF_FIELD_OFFSET(::SaveState, last_card_),
  PROTOBUF_FIELD_OFFSET(::SaveState, timeout_),
  PROTOBUF_FIELD_OFFSET(::SaveState, last_timeout_),
  0,
  4,
  5,
  6,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::SaveState_CardInfo)},
  { 9, 16, sizeof(::SaveState_TimeoutInfo)},
  { 18, 30, sizeof(::SaveState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SaveState_CardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SaveState_TimeoutInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SaveState_default_instance_),
};

const char descriptor_table_protodef_savestate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017savestate.proto\032\rreferee.proto\"\323\003\n\tSav"
  "eState\022\035\n\007referee\030\001 \002(\0132\014.SSL_Referee\022\034\n"
  "\024yellow_penalty_goals\030\002 \002(\r\022\032\n\022blue_pena"
  "lty_goals\030\003 \002(\r\022\022\n\ntime_taken\030\004 \002(\004\022&\n\tl"
  "ast_card\030\005 \001(\0132\023.SaveState.CardInfo\022\'\n\007t"
  "imeout\030\006 \001(\0132\026.SaveState.TimeoutInfo\022,\n\014"
  "last_timeout\030\007 \001(\0132\026.SaveState.TimeoutIn"
  "fo\032H\n\010CardInfo\022\035\n\004team\030\001 \002(\0162\017.SaveState"
  ".Team\022\035\n\004card\030\002 \002(\0162\017.SaveState.Card\032A\n\013"
  "TimeoutInfo\022\035\n\004team\030\001 \002(\0162\017.SaveState.Te"
  "am\022\023\n\013left_before\030\002 \002(\r\"&\n\004Team\022\017\n\013TEAM_"
  "YELLOW\020\000\022\r\n\tTEAM_BLUE\020\001\"%\n\004Card\022\017\n\013CARD_"
  "YELLOW\020\000\022\014\n\010CARD_RED\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_savestate_2eproto_deps[1] = {
  &::descriptor_table_referee_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_savestate_2eproto_sccs[3] = {
  &scc_info_SaveState_savestate_2eproto.base,
  &scc_info_SaveState_CardInfo_savestate_2eproto.base,
  &scc_info_SaveState_TimeoutInfo_savestate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_savestate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_savestate_2eproto = {
  false, false, descriptor_table_protodef_savestate_2eproto, "savestate.proto", 502,
  &descriptor_table_savestate_2eproto_once, descriptor_table_savestate_2eproto_sccs, descriptor_table_savestate_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_savestate_2eproto::offsets,
  file_level_metadata_savestate_2eproto, 3, file_level_enum_descriptors_savestate_2eproto, file_level_service_descriptors_savestate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_savestate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_savestate_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaveState_Team_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_savestate_2eproto);
  return file_level_enum_descriptors_savestate_2eproto[0];
}
bool SaveState_Team_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SaveState_Team SaveState::TEAM_YELLOW;
constexpr SaveState_Team SaveState::TEAM_BLUE;
constexpr SaveState_Team SaveState::Team_MIN;
constexpr SaveState_Team SaveState::Team_MAX;
constexpr int SaveState::Team_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaveState_Card_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_savestate_2eproto);
  return file_level_enum_descriptors_savestate_2eproto[1];
}
bool SaveState_Card_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SaveState_Card SaveState::CARD_YELLOW;
constexpr SaveState_Card SaveState::CARD_RED;
constexpr SaveState_Card SaveState::Card_MIN;
constexpr SaveState_Card SaveState::Card_MAX;
constexpr int SaveState::Card_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SaveState_CardInfo::InitAsDefaultInstance() {
}
class SaveState_CardInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SaveState_CardInfo>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_card(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SaveState_CardInfo::SaveState_CardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SaveState.CardInfo)
}
SaveState_CardInfo::SaveState_CardInfo(const SaveState_CardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_) -
    reinterpret_cast<char*>(&team_)) + sizeof(card_));
  // @@protoc_insertion_point(copy_constructor:SaveState.CardInfo)
}

void SaveState_CardInfo::SharedCtor() {
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_) -
      reinterpret_cast<char*>(&team_)) + sizeof(card_));
}

SaveState_CardInfo::~SaveState_CardInfo() {
  // @@protoc_insertion_point(destructor:SaveState.CardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveState_CardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SaveState_CardInfo::ArenaDtor(void* object) {
  SaveState_CardInfo* _this = reinterpret_cast< SaveState_CardInfo* >(object);
  (void)_this;
}
void SaveState_CardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveState_CardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveState_CardInfo& SaveState_CardInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveState_CardInfo_savestate_2eproto.base);
  return *internal_default_instance();
}


void SaveState_CardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveState.CardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&card_) -
        reinterpret_cast<char*>(&team_)) + sizeof(card_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveState_CardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .SaveState.Team team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SaveState_Team_IsValid(val))) {
            _internal_set_team(static_cast<::SaveState_Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .SaveState.Card card = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SaveState_Card_IsValid(val))) {
            _internal_set_card(static_cast<::SaveState_Card>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveState_CardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveState.CardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SaveState.Team team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team(), target);
  }

  // required .SaveState.Card card = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_card(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveState.CardInfo)
  return target;
}

size_t SaveState_CardInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SaveState.CardInfo)
  size_t total_size = 0;

  if (_internal_has_team()) {
    // required .SaveState.Team team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
  }

  if (_internal_has_card()) {
    // required .SaveState.Card card = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_card());
  }

  return total_size;
}
size_t SaveState_CardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveState.CardInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .SaveState.Team team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());

    // required .SaveState.Card card = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_card());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveState_CardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SaveState.CardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveState_CardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveState_CardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SaveState.CardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SaveState.CardInfo)
    MergeFrom(*source);
  }
}

void SaveState_CardInfo::MergeFrom(const SaveState_CardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SaveState.CardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      card_ = from.card_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SaveState_CardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SaveState.CardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveState_CardInfo::CopyFrom(const SaveState_CardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveState.CardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveState_CardInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SaveState_CardInfo::InternalSwap(SaveState_CardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveState_CardInfo, card_)
      + sizeof(SaveState_CardInfo::card_)
      - PROTOBUF_FIELD_OFFSET(SaveState_CardInfo, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveState_CardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveState_TimeoutInfo::InitAsDefaultInstance() {
}
class SaveState_TimeoutInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SaveState_TimeoutInfo>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_left_before(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SaveState_TimeoutInfo::SaveState_TimeoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SaveState.TimeoutInfo)
}
SaveState_TimeoutInfo::SaveState_TimeoutInfo(const SaveState_TimeoutInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_before_) -
    reinterpret_cast<char*>(&team_)) + sizeof(left_before_));
  // @@protoc_insertion_point(copy_constructor:SaveState.TimeoutInfo)
}

void SaveState_TimeoutInfo::SharedCtor() {
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_before_) -
      reinterpret_cast<char*>(&team_)) + sizeof(left_before_));
}

SaveState_TimeoutInfo::~SaveState_TimeoutInfo() {
  // @@protoc_insertion_point(destructor:SaveState.TimeoutInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveState_TimeoutInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SaveState_TimeoutInfo::ArenaDtor(void* object) {
  SaveState_TimeoutInfo* _this = reinterpret_cast< SaveState_TimeoutInfo* >(object);
  (void)_this;
}
void SaveState_TimeoutInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveState_TimeoutInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveState_TimeoutInfo& SaveState_TimeoutInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveState_TimeoutInfo_savestate_2eproto.base);
  return *internal_default_instance();
}


void SaveState_TimeoutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveState.TimeoutInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&left_before_) -
        reinterpret_cast<char*>(&team_)) + sizeof(left_before_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveState_TimeoutInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .SaveState.Team team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SaveState_Team_IsValid(val))) {
            _internal_set_team(static_cast<::SaveState_Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 left_before = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_left_before(&has_bits);
          left_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveState_TimeoutInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveState.TimeoutInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SaveState.Team team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team(), target);
  }

  // required uint32 left_before = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_left_before(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveState.TimeoutInfo)
  return target;
}

size_t SaveState_TimeoutInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SaveState.TimeoutInfo)
  size_t total_size = 0;

  if (_internal_has_team()) {
    // required .SaveState.Team team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
  }

  if (_internal_has_left_before()) {
    // required uint32 left_before = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_left_before());
  }

  return total_size;
}
size_t SaveState_TimeoutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveState.TimeoutInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .SaveState.Team team = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());

    // required uint32 left_before = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_left_before());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveState_TimeoutInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SaveState.TimeoutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveState_TimeoutInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveState_TimeoutInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SaveState.TimeoutInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SaveState.TimeoutInfo)
    MergeFrom(*source);
  }
}

void SaveState_TimeoutInfo::MergeFrom(const SaveState_TimeoutInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SaveState.TimeoutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_before_ = from.left_before_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SaveState_TimeoutInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SaveState.TimeoutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveState_TimeoutInfo::CopyFrom(const SaveState_TimeoutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveState.TimeoutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveState_TimeoutInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SaveState_TimeoutInfo::InternalSwap(SaveState_TimeoutInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveState_TimeoutInfo, left_before_)
      + sizeof(SaveState_TimeoutInfo::left_before_)
      - PROTOBUF_FIELD_OFFSET(SaveState_TimeoutInfo, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveState_TimeoutInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SaveState::InitAsDefaultInstance() {
  ::_SaveState_default_instance_._instance.get_mutable()->referee_ = const_cast< ::SSL_Referee*>(
      ::SSL_Referee::internal_default_instance());
  ::_SaveState_default_instance_._instance.get_mutable()->last_card_ = const_cast< ::SaveState_CardInfo*>(
      ::SaveState_CardInfo::internal_default_instance());
  ::_SaveState_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::SaveState_TimeoutInfo*>(
      ::SaveState_TimeoutInfo::internal_default_instance());
  ::_SaveState_default_instance_._instance.get_mutable()->last_timeout_ = const_cast< ::SaveState_TimeoutInfo*>(
      ::SaveState_TimeoutInfo::internal_default_instance());
}
class SaveState::_Internal {
 public:
  using HasBits = decltype(std::declval<SaveState>()._has_bits_);
  static const ::SSL_Referee& referee(const SaveState* msg);
  static void set_has_referee(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_yellow_penalty_goals(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_blue_penalty_goals(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::SaveState_CardInfo& last_card(const SaveState* msg);
  static void set_has_last_card(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SaveState_TimeoutInfo& timeout(const SaveState* msg);
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SaveState_TimeoutInfo& last_timeout(const SaveState* msg);
  static void set_has_last_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000071) ^ 0x00000071) != 0;
  }
};

const ::SSL_Referee&
SaveState::_Internal::referee(const SaveState* msg) {
  return *msg->referee_;
}
const ::SaveState_CardInfo&
SaveState::_Internal::last_card(const SaveState* msg) {
  return *msg->last_card_;
}
const ::SaveState_TimeoutInfo&
SaveState::_Internal::timeout(const SaveState* msg) {
  return *msg->timeout_;
}
const ::SaveState_TimeoutInfo&
SaveState::_Internal::last_timeout(const SaveState* msg) {
  return *msg->last_timeout_;
}
void SaveState::clear_referee() {
  if (referee_ != nullptr) referee_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SaveState::SaveState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SaveState)
}
SaveState::SaveState(const SaveState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_referee()) {
    referee_ = new ::SSL_Referee(*from.referee_);
  } else {
    referee_ = nullptr;
  }
  if (from._internal_has_last_card()) {
    last_card_ = new ::SaveState_CardInfo(*from.last_card_);
  } else {
    last_card_ = nullptr;
  }
  if (from._internal_has_timeout()) {
    timeout_ = new ::SaveState_TimeoutInfo(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  if (from._internal_has_last_timeout()) {
    last_timeout_ = new ::SaveState_TimeoutInfo(*from.last_timeout_);
  } else {
    last_timeout_ = nullptr;
  }
  ::memcpy(&yellow_penalty_goals_, &from.yellow_penalty_goals_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_taken_) -
    reinterpret_cast<char*>(&yellow_penalty_goals_)) + sizeof(time_taken_));
  // @@protoc_insertion_point(copy_constructor:SaveState)
}

void SaveState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SaveState_savestate_2eproto.base);
  ::memset(&referee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_taken_) -
      reinterpret_cast<char*>(&referee_)) + sizeof(time_taken_));
}

SaveState::~SaveState() {
  // @@protoc_insertion_point(destructor:SaveState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SaveState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete referee_;
  if (this != internal_default_instance()) delete last_card_;
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete last_timeout_;
}

void SaveState::ArenaDtor(void* object) {
  SaveState* _this = reinterpret_cast< SaveState* >(object);
  (void)_this;
}
void SaveState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SaveState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SaveState& SaveState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SaveState_savestate_2eproto.base);
  return *internal_default_instance();
}


void SaveState::Clear() {
// @@protoc_insertion_point(message_clear_start:SaveState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(referee_ != nullptr);
      referee_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(last_card_ != nullptr);
      last_card_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(timeout_ != nullptr);
      timeout_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(last_timeout_ != nullptr);
      last_timeout_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&yellow_penalty_goals_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_taken_) -
        reinterpret_cast<char*>(&yellow_penalty_goals_)) + sizeof(time_taken_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .SSL_Referee referee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_referee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 yellow_penalty_goals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_yellow_penalty_goals(&has_bits);
          yellow_penalty_goals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 blue_penalty_goals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_blue_penalty_goals(&has_bits);
          blue_penalty_goals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 time_taken = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_taken(&has_bits);
          time_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SaveState.CardInfo last_card = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_card(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SaveState.TimeoutInfo timeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SaveState.TimeoutInfo last_timeout = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SaveState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SaveState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .SSL_Referee referee = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::referee(this), target, stream);
  }

  // required uint32 yellow_penalty_goals = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_yellow_penalty_goals(), target);
  }

  // required uint32 blue_penalty_goals = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blue_penalty_goals(), target);
  }

  // required uint64 time_taken = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_time_taken(), target);
  }

  // optional .SaveState.CardInfo last_card = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::last_card(this), target, stream);
  }

  // optional .SaveState.TimeoutInfo timeout = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timeout(this), target, stream);
  }

  // optional .SaveState.TimeoutInfo last_timeout = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::last_timeout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SaveState)
  return target;
}

size_t SaveState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SaveState)
  size_t total_size = 0;

  if (_internal_has_referee()) {
    // required .SSL_Referee referee = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *referee_);
  }

  if (_internal_has_yellow_penalty_goals()) {
    // required uint32 yellow_penalty_goals = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yellow_penalty_goals());
  }

  if (_internal_has_blue_penalty_goals()) {
    // required uint32 blue_penalty_goals = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blue_penalty_goals());
  }

  if (_internal_has_time_taken()) {
    // required uint64 time_taken = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_taken());
  }

  return total_size;
}
size_t SaveState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SaveState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000071) ^ 0x00000071) == 0) {  // All required fields are present.
    // required .SSL_Referee referee = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *referee_);

    // required uint32 yellow_penalty_goals = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_yellow_penalty_goals());

    // required uint32 blue_penalty_goals = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blue_penalty_goals());

    // required uint64 time_taken = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_taken());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .SaveState.CardInfo last_card = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_card_);
    }

    // optional .SaveState.TimeoutInfo timeout = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timeout_);
    }

    // optional .SaveState.TimeoutInfo last_timeout = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_timeout_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SaveState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SaveState)
  GOOGLE_DCHECK_NE(&from, this);
  const SaveState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SaveState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SaveState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SaveState)
    MergeFrom(*source);
  }
}

void SaveState::MergeFrom(const SaveState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SaveState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_referee()->::SSL_Referee::MergeFrom(from._internal_referee());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_last_card()->::SaveState_CardInfo::MergeFrom(from._internal_last_card());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_timeout()->::SaveState_TimeoutInfo::MergeFrom(from._internal_timeout());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_last_timeout()->::SaveState_TimeoutInfo::MergeFrom(from._internal_last_timeout());
    }
    if (cached_has_bits & 0x00000010u) {
      yellow_penalty_goals_ = from.yellow_penalty_goals_;
    }
    if (cached_has_bits & 0x00000020u) {
      blue_penalty_goals_ = from.blue_penalty_goals_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_taken_ = from.time_taken_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SaveState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SaveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveState::CopyFrom(const SaveState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SaveState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_referee()) {
    if (!referee_->IsInitialized()) return false;
  }
  if (_internal_has_last_card()) {
    if (!last_card_->IsInitialized()) return false;
  }
  if (_internal_has_timeout()) {
    if (!timeout_->IsInitialized()) return false;
  }
  if (_internal_has_last_timeout()) {
    if (!last_timeout_->IsInitialized()) return false;
  }
  return true;
}

void SaveState::InternalSwap(SaveState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaveState, time_taken_)
      + sizeof(SaveState::time_taken_)
      - PROTOBUF_FIELD_OFFSET(SaveState, referee_)>(
          reinterpret_cast<char*>(&referee_),
          reinterpret_cast<char*>(&other->referee_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SaveState_CardInfo* Arena::CreateMaybeMessage< ::SaveState_CardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SaveState_CardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SaveState_TimeoutInfo* Arena::CreateMaybeMessage< ::SaveState_TimeoutInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SaveState_TimeoutInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::SaveState* Arena::CreateMaybeMessage< ::SaveState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SaveState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
