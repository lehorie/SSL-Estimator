// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rcon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rcon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rcon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "referee.pb.h"
#include "game_event.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rcon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rcon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rcon_2eproto;
class SSL_RefereeRemoteControlReply;
class SSL_RefereeRemoteControlReplyDefaultTypeInternal;
extern SSL_RefereeRemoteControlReplyDefaultTypeInternal _SSL_RefereeRemoteControlReply_default_instance_;
class SSL_RefereeRemoteControlRequest;
class SSL_RefereeRemoteControlRequestDefaultTypeInternal;
extern SSL_RefereeRemoteControlRequestDefaultTypeInternal _SSL_RefereeRemoteControlRequest_default_instance_;
class SSL_RefereeRemoteControlRequest_CardInfo;
class SSL_RefereeRemoteControlRequest_CardInfoDefaultTypeInternal;
extern SSL_RefereeRemoteControlRequest_CardInfoDefaultTypeInternal _SSL_RefereeRemoteControlRequest_CardInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSL_RefereeRemoteControlReply* Arena::CreateMaybeMessage<::SSL_RefereeRemoteControlReply>(Arena*);
template<> ::SSL_RefereeRemoteControlRequest* Arena::CreateMaybeMessage<::SSL_RefereeRemoteControlRequest>(Arena*);
template<> ::SSL_RefereeRemoteControlRequest_CardInfo* Arena::CreateMaybeMessage<::SSL_RefereeRemoteControlRequest_CardInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SSL_RefereeRemoteControlRequest_CardInfo_CardType : int {
  SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_YELLOW = 0,
  SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_RED = 1
};
bool SSL_RefereeRemoteControlRequest_CardInfo_CardType_IsValid(int value);
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_MIN = SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_YELLOW;
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_MAX = SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_RED;
constexpr int SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_ARRAYSIZE = SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor();
template<typename T>
inline const std::string& SSL_RefereeRemoteControlRequest_CardInfo_CardType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSL_RefereeRemoteControlRequest_CardInfo_CardType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSL_RefereeRemoteControlRequest_CardInfo_CardType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor(), enum_t_value);
}
inline bool SSL_RefereeRemoteControlRequest_CardInfo_CardType_Parse(
    const std::string& name, SSL_RefereeRemoteControlRequest_CardInfo_CardType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSL_RefereeRemoteControlRequest_CardInfo_CardType>(
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor(), name, value);
}
enum SSL_RefereeRemoteControlRequest_CardInfo_CardTeam : int {
  SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_YELLOW = 0,
  SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_BLUE = 1
};
bool SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_IsValid(int value);
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_MIN = SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_YELLOW;
constexpr SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_MAX = SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_BLUE;
constexpr int SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_ARRAYSIZE = SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor();
template<typename T>
inline const std::string& SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSL_RefereeRemoteControlRequest_CardInfo_CardTeam>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor(), enum_t_value);
}
inline bool SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_Parse(
    const std::string& name, SSL_RefereeRemoteControlRequest_CardInfo_CardTeam* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSL_RefereeRemoteControlRequest_CardInfo_CardTeam>(
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor(), name, value);
}
enum SSL_RefereeRemoteControlReply_Outcome : int {
  SSL_RefereeRemoteControlReply_Outcome_OK = 0,
  SSL_RefereeRemoteControlReply_Outcome_MULTIPLE_ACTIONS = 1,
  SSL_RefereeRemoteControlReply_Outcome_BAD_STAGE = 2,
  SSL_RefereeRemoteControlReply_Outcome_BAD_COMMAND = 3,
  SSL_RefereeRemoteControlReply_Outcome_BAD_DESIGNATED_POSITION = 4,
  SSL_RefereeRemoteControlReply_Outcome_BAD_COMMAND_COUNTER = 5,
  SSL_RefereeRemoteControlReply_Outcome_BAD_CARD = 6,
  SSL_RefereeRemoteControlReply_Outcome_NO_MAJORITY = 7,
  SSL_RefereeRemoteControlReply_Outcome_COMMUNICATION_FAILED = 8
};
bool SSL_RefereeRemoteControlReply_Outcome_IsValid(int value);
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply_Outcome_Outcome_MIN = SSL_RefereeRemoteControlReply_Outcome_OK;
constexpr SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply_Outcome_Outcome_MAX = SSL_RefereeRemoteControlReply_Outcome_COMMUNICATION_FAILED;
constexpr int SSL_RefereeRemoteControlReply_Outcome_Outcome_ARRAYSIZE = SSL_RefereeRemoteControlReply_Outcome_Outcome_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_RefereeRemoteControlReply_Outcome_descriptor();
template<typename T>
inline const std::string& SSL_RefereeRemoteControlReply_Outcome_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSL_RefereeRemoteControlReply_Outcome>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSL_RefereeRemoteControlReply_Outcome_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSL_RefereeRemoteControlReply_Outcome_descriptor(), enum_t_value);
}
inline bool SSL_RefereeRemoteControlReply_Outcome_Parse(
    const std::string& name, SSL_RefereeRemoteControlReply_Outcome* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSL_RefereeRemoteControlReply_Outcome>(
    SSL_RefereeRemoteControlReply_Outcome_descriptor(), name, value);
}
// ===================================================================

class SSL_RefereeRemoteControlRequest_CardInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_RefereeRemoteControlRequest.CardInfo) */ {
 public:
  inline SSL_RefereeRemoteControlRequest_CardInfo() : SSL_RefereeRemoteControlRequest_CardInfo(nullptr) {};
  virtual ~SSL_RefereeRemoteControlRequest_CardInfo();

  SSL_RefereeRemoteControlRequest_CardInfo(const SSL_RefereeRemoteControlRequest_CardInfo& from);
  SSL_RefereeRemoteControlRequest_CardInfo(SSL_RefereeRemoteControlRequest_CardInfo&& from) noexcept
    : SSL_RefereeRemoteControlRequest_CardInfo() {
    *this = ::std::move(from);
  }

  inline SSL_RefereeRemoteControlRequest_CardInfo& operator=(const SSL_RefereeRemoteControlRequest_CardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_RefereeRemoteControlRequest_CardInfo& operator=(SSL_RefereeRemoteControlRequest_CardInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_RefereeRemoteControlRequest_CardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_RefereeRemoteControlRequest_CardInfo* internal_default_instance() {
    return reinterpret_cast<const SSL_RefereeRemoteControlRequest_CardInfo*>(
               &_SSL_RefereeRemoteControlRequest_CardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SSL_RefereeRemoteControlRequest_CardInfo& a, SSL_RefereeRemoteControlRequest_CardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_RefereeRemoteControlRequest_CardInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_RefereeRemoteControlRequest_CardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_RefereeRemoteControlRequest_CardInfo* New() const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlRequest_CardInfo>(nullptr);
  }

  SSL_RefereeRemoteControlRequest_CardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlRequest_CardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_RefereeRemoteControlRequest_CardInfo& from);
  void MergeFrom(const SSL_RefereeRemoteControlRequest_CardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_RefereeRemoteControlRequest_CardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_RefereeRemoteControlRequest.CardInfo";
  }
  protected:
  explicit SSL_RefereeRemoteControlRequest_CardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rcon_2eproto);
    return ::descriptor_table_rcon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SSL_RefereeRemoteControlRequest_CardInfo_CardType CardType;
  static constexpr CardType CARD_YELLOW =
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_YELLOW;
  static constexpr CardType CARD_RED =
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_CARD_RED;
  static inline bool CardType_IsValid(int value) {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardType_IsValid(value);
  }
  static constexpr CardType CardType_MIN =
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_MIN;
  static constexpr CardType CardType_MAX =
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_MAX;
  static constexpr int CardType_ARRAYSIZE =
    SSL_RefereeRemoteControlRequest_CardInfo_CardType_CardType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CardType_descriptor() {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor();
  }
  template<typename T>
  static inline const std::string& CardType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CardType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CardType_Name.");
    return SSL_RefereeRemoteControlRequest_CardInfo_CardType_Name(enum_t_value);
  }
  static inline bool CardType_Parse(const std::string& name,
      CardType* value) {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardType_Parse(name, value);
  }

  typedef SSL_RefereeRemoteControlRequest_CardInfo_CardTeam CardTeam;
  static constexpr CardTeam TEAM_YELLOW =
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_YELLOW;
  static constexpr CardTeam TEAM_BLUE =
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_TEAM_BLUE;
  static inline bool CardTeam_IsValid(int value) {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_IsValid(value);
  }
  static constexpr CardTeam CardTeam_MIN =
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_MIN;
  static constexpr CardTeam CardTeam_MAX =
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_MAX;
  static constexpr int CardTeam_ARRAYSIZE =
    SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_CardTeam_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CardTeam_descriptor() {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor();
  }
  template<typename T>
  static inline const std::string& CardTeam_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CardTeam>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CardTeam_Name.");
    return SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_Name(enum_t_value);
  }
  static inline bool CardTeam_Parse(const std::string& name,
      CardTeam* value) {
    return SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kTeamFieldNumber = 2,
  };
  // required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::SSL_RefereeRemoteControlRequest_CardInfo_CardType type() const;
  void set_type(::SSL_RefereeRemoteControlRequest_CardInfo_CardType value);
  private:
  ::SSL_RefereeRemoteControlRequest_CardInfo_CardType _internal_type() const;
  void _internal_set_type(::SSL_RefereeRemoteControlRequest_CardInfo_CardType value);
  public:

  // required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam team() const;
  void set_team(::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam value);
  private:
  ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam _internal_team() const;
  void _internal_set_team(::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_RefereeRemoteControlRequest.CardInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  int team_;
  friend struct ::TableStruct_rcon_2eproto;
};
// -------------------------------------------------------------------

class SSL_RefereeRemoteControlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_RefereeRemoteControlRequest) */ {
 public:
  inline SSL_RefereeRemoteControlRequest() : SSL_RefereeRemoteControlRequest(nullptr) {};
  virtual ~SSL_RefereeRemoteControlRequest();

  SSL_RefereeRemoteControlRequest(const SSL_RefereeRemoteControlRequest& from);
  SSL_RefereeRemoteControlRequest(SSL_RefereeRemoteControlRequest&& from) noexcept
    : SSL_RefereeRemoteControlRequest() {
    *this = ::std::move(from);
  }

  inline SSL_RefereeRemoteControlRequest& operator=(const SSL_RefereeRemoteControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_RefereeRemoteControlRequest& operator=(SSL_RefereeRemoteControlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_RefereeRemoteControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_RefereeRemoteControlRequest* internal_default_instance() {
    return reinterpret_cast<const SSL_RefereeRemoteControlRequest*>(
               &_SSL_RefereeRemoteControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSL_RefereeRemoteControlRequest& a, SSL_RefereeRemoteControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_RefereeRemoteControlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_RefereeRemoteControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_RefereeRemoteControlRequest* New() const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlRequest>(nullptr);
  }

  SSL_RefereeRemoteControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_RefereeRemoteControlRequest& from);
  void MergeFrom(const SSL_RefereeRemoteControlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_RefereeRemoteControlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_RefereeRemoteControlRequest";
  }
  protected:
  explicit SSL_RefereeRemoteControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rcon_2eproto);
    return ::descriptor_table_rcon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SSL_RefereeRemoteControlRequest_CardInfo CardInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kImplementationIdFieldNumber = 7,
    kDesignatedPositionFieldNumber = 4,
    kCardFieldNumber = 5,
    kGameEventFieldNumber = 8,
    kMessageIdFieldNumber = 1,
    kStageFieldNumber = 2,
    kCommandFieldNumber = 3,
    kLastCommandCounterFieldNumber = 6,
  };
  // optional string implementation_id = 7;
  bool has_implementation_id() const;
  private:
  bool _internal_has_implementation_id() const;
  public:
  void clear_implementation_id();
  const std::string& implementation_id() const;
  void set_implementation_id(const std::string& value);
  void set_implementation_id(std::string&& value);
  void set_implementation_id(const char* value);
  void set_implementation_id(const char* value, size_t size);
  std::string* mutable_implementation_id();
  std::string* release_implementation_id();
  void set_allocated_implementation_id(std::string* implementation_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_implementation_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_implementation_id(
      std::string* implementation_id);
  private:
  const std::string& _internal_implementation_id() const;
  void _internal_set_implementation_id(const std::string& value);
  std::string* _internal_mutable_implementation_id();
  public:

  // optional .SSL_Referee.Point designated_position = 4;
  bool has_designated_position() const;
  private:
  bool _internal_has_designated_position() const;
  public:
  void clear_designated_position();
  const ::SSL_Referee_Point& designated_position() const;
  ::SSL_Referee_Point* release_designated_position();
  ::SSL_Referee_Point* mutable_designated_position();
  void set_allocated_designated_position(::SSL_Referee_Point* designated_position);
  private:
  const ::SSL_Referee_Point& _internal_designated_position() const;
  ::SSL_Referee_Point* _internal_mutable_designated_position();
  public:
  void unsafe_arena_set_allocated_designated_position(
      ::SSL_Referee_Point* designated_position);
  ::SSL_Referee_Point* unsafe_arena_release_designated_position();

  // optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
  bool has_card() const;
  private:
  bool _internal_has_card() const;
  public:
  void clear_card();
  const ::SSL_RefereeRemoteControlRequest_CardInfo& card() const;
  ::SSL_RefereeRemoteControlRequest_CardInfo* release_card();
  ::SSL_RefereeRemoteControlRequest_CardInfo* mutable_card();
  void set_allocated_card(::SSL_RefereeRemoteControlRequest_CardInfo* card);
  private:
  const ::SSL_RefereeRemoteControlRequest_CardInfo& _internal_card() const;
  ::SSL_RefereeRemoteControlRequest_CardInfo* _internal_mutable_card();
  public:
  void unsafe_arena_set_allocated_card(
      ::SSL_RefereeRemoteControlRequest_CardInfo* card);
  ::SSL_RefereeRemoteControlRequest_CardInfo* unsafe_arena_release_card();

  // optional .SSL_Referee_Game_Event gameEvent = 8;
  bool has_gameevent() const;
  private:
  bool _internal_has_gameevent() const;
  public:
  void clear_gameevent();
  const ::SSL_Referee_Game_Event& gameevent() const;
  ::SSL_Referee_Game_Event* release_gameevent();
  ::SSL_Referee_Game_Event* mutable_gameevent();
  void set_allocated_gameevent(::SSL_Referee_Game_Event* gameevent);
  private:
  const ::SSL_Referee_Game_Event& _internal_gameevent() const;
  ::SSL_Referee_Game_Event* _internal_mutable_gameevent();
  public:
  void unsafe_arena_set_allocated_gameevent(
      ::SSL_Referee_Game_Event* gameevent);
  ::SSL_Referee_Game_Event* unsafe_arena_release_gameevent();

  // required uint32 message_id = 1;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .SSL_Referee.Stage stage = 2;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  ::SSL_Referee_Stage stage() const;
  void set_stage(::SSL_Referee_Stage value);
  private:
  ::SSL_Referee_Stage _internal_stage() const;
  void _internal_set_stage(::SSL_Referee_Stage value);
  public:

  // optional .SSL_Referee.Command command = 3;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::SSL_Referee_Command command() const;
  void set_command(::SSL_Referee_Command value);
  private:
  ::SSL_Referee_Command _internal_command() const;
  void _internal_set_command(::SSL_Referee_Command value);
  public:

  // optional uint32 last_command_counter = 6;
  bool has_last_command_counter() const;
  private:
  bool _internal_has_last_command_counter() const;
  public:
  void clear_last_command_counter();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_command_counter() const;
  void set_last_command_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_command_counter() const;
  void _internal_set_last_command_counter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_RefereeRemoteControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr implementation_id_;
  ::SSL_Referee_Point* designated_position_;
  ::SSL_RefereeRemoteControlRequest_CardInfo* card_;
  ::SSL_Referee_Game_Event* gameevent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_id_;
  int stage_;
  int command_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_command_counter_;
  friend struct ::TableStruct_rcon_2eproto;
};
// -------------------------------------------------------------------

class SSL_RefereeRemoteControlReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_RefereeRemoteControlReply) */ {
 public:
  inline SSL_RefereeRemoteControlReply() : SSL_RefereeRemoteControlReply(nullptr) {};
  virtual ~SSL_RefereeRemoteControlReply();

  SSL_RefereeRemoteControlReply(const SSL_RefereeRemoteControlReply& from);
  SSL_RefereeRemoteControlReply(SSL_RefereeRemoteControlReply&& from) noexcept
    : SSL_RefereeRemoteControlReply() {
    *this = ::std::move(from);
  }

  inline SSL_RefereeRemoteControlReply& operator=(const SSL_RefereeRemoteControlReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_RefereeRemoteControlReply& operator=(SSL_RefereeRemoteControlReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SSL_RefereeRemoteControlReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SSL_RefereeRemoteControlReply* internal_default_instance() {
    return reinterpret_cast<const SSL_RefereeRemoteControlReply*>(
               &_SSL_RefereeRemoteControlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSL_RefereeRemoteControlReply& a, SSL_RefereeRemoteControlReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_RefereeRemoteControlReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_RefereeRemoteControlReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SSL_RefereeRemoteControlReply* New() const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlReply>(nullptr);
  }

  SSL_RefereeRemoteControlReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SSL_RefereeRemoteControlReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SSL_RefereeRemoteControlReply& from);
  void MergeFrom(const SSL_RefereeRemoteControlReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_RefereeRemoteControlReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_RefereeRemoteControlReply";
  }
  protected:
  explicit SSL_RefereeRemoteControlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rcon_2eproto);
    return ::descriptor_table_rcon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SSL_RefereeRemoteControlReply_Outcome Outcome;
  static constexpr Outcome OK =
    SSL_RefereeRemoteControlReply_Outcome_OK;
  static constexpr Outcome MULTIPLE_ACTIONS =
    SSL_RefereeRemoteControlReply_Outcome_MULTIPLE_ACTIONS;
  static constexpr Outcome BAD_STAGE =
    SSL_RefereeRemoteControlReply_Outcome_BAD_STAGE;
  static constexpr Outcome BAD_COMMAND =
    SSL_RefereeRemoteControlReply_Outcome_BAD_COMMAND;
  static constexpr Outcome BAD_DESIGNATED_POSITION =
    SSL_RefereeRemoteControlReply_Outcome_BAD_DESIGNATED_POSITION;
  static constexpr Outcome BAD_COMMAND_COUNTER =
    SSL_RefereeRemoteControlReply_Outcome_BAD_COMMAND_COUNTER;
  static constexpr Outcome BAD_CARD =
    SSL_RefereeRemoteControlReply_Outcome_BAD_CARD;
  static constexpr Outcome NO_MAJORITY =
    SSL_RefereeRemoteControlReply_Outcome_NO_MAJORITY;
  static constexpr Outcome COMMUNICATION_FAILED =
    SSL_RefereeRemoteControlReply_Outcome_COMMUNICATION_FAILED;
  static inline bool Outcome_IsValid(int value) {
    return SSL_RefereeRemoteControlReply_Outcome_IsValid(value);
  }
  static constexpr Outcome Outcome_MIN =
    SSL_RefereeRemoteControlReply_Outcome_Outcome_MIN;
  static constexpr Outcome Outcome_MAX =
    SSL_RefereeRemoteControlReply_Outcome_Outcome_MAX;
  static constexpr int Outcome_ARRAYSIZE =
    SSL_RefereeRemoteControlReply_Outcome_Outcome_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Outcome_descriptor() {
    return SSL_RefereeRemoteControlReply_Outcome_descriptor();
  }
  template<typename T>
  static inline const std::string& Outcome_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Outcome>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Outcome_Name.");
    return SSL_RefereeRemoteControlReply_Outcome_Name(enum_t_value);
  }
  static inline bool Outcome_Parse(const std::string& name,
      Outcome* value) {
    return SSL_RefereeRemoteControlReply_Outcome_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kOutcomeFieldNumber = 2,
  };
  // required uint32 message_id = 1;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
  bool has_outcome() const;
  private:
  bool _internal_has_outcome() const;
  public:
  void clear_outcome();
  ::SSL_RefereeRemoteControlReply_Outcome outcome() const;
  void set_outcome(::SSL_RefereeRemoteControlReply_Outcome value);
  private:
  ::SSL_RefereeRemoteControlReply_Outcome _internal_outcome() const;
  void _internal_set_outcome(::SSL_RefereeRemoteControlReply_Outcome value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_RefereeRemoteControlReply)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_id_;
  int outcome_;
  friend struct ::TableStruct_rcon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SSL_RefereeRemoteControlRequest_CardInfo

// required .SSL_RefereeRemoteControlRequest.CardInfo.CardType type = 1;
inline bool SSL_RefereeRemoteControlRequest_CardInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_RefereeRemoteControlRequest_CardInfo::has_type() const {
  return _internal_has_type();
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::_internal_type() const {
  return static_cast< ::SSL_RefereeRemoteControlRequest_CardInfo_CardType >(type_);
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo_CardType SSL_RefereeRemoteControlRequest_CardInfo::type() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.CardInfo.type)
  return _internal_type();
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::_internal_set_type(::SSL_RefereeRemoteControlRequest_CardInfo_CardType value) {
  assert(::SSL_RefereeRemoteControlRequest_CardInfo_CardType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::set_type(::SSL_RefereeRemoteControlRequest_CardInfo_CardType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.CardInfo.type)
}

// required .SSL_RefereeRemoteControlRequest.CardInfo.CardTeam team = 2;
inline bool SSL_RefereeRemoteControlRequest_CardInfo::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_RefereeRemoteControlRequest_CardInfo::has_team() const {
  return _internal_has_team();
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::clear_team() {
  team_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::_internal_team() const {
  return static_cast< ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam >(team_);
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam SSL_RefereeRemoteControlRequest_CardInfo::team() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.CardInfo.team)
  return _internal_team();
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::_internal_set_team(::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam value) {
  assert(::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  team_ = value;
}
inline void SSL_RefereeRemoteControlRequest_CardInfo::set_team(::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.CardInfo.team)
}

// -------------------------------------------------------------------

// SSL_RefereeRemoteControlRequest

// required uint32 message_id = 1;
inline bool SSL_RefereeRemoteControlRequest::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_RefereeRemoteControlRequest::has_message_id() const {
  return _internal_has_message_id();
}
inline void SSL_RefereeRemoteControlRequest::clear_message_id() {
  message_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_RefereeRemoteControlRequest::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_RefereeRemoteControlRequest::message_id() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.message_id)
  return _internal_message_id();
}
inline void SSL_RefereeRemoteControlRequest::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  message_id_ = value;
}
inline void SSL_RefereeRemoteControlRequest::set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.message_id)
}

// optional .SSL_Referee.Stage stage = 2;
inline bool SSL_RefereeRemoteControlRequest::_internal_has_stage() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SSL_RefereeRemoteControlRequest::has_stage() const {
  return _internal_has_stage();
}
inline void SSL_RefereeRemoteControlRequest::clear_stage() {
  stage_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::SSL_Referee_Stage SSL_RefereeRemoteControlRequest::_internal_stage() const {
  return static_cast< ::SSL_Referee_Stage >(stage_);
}
inline ::SSL_Referee_Stage SSL_RefereeRemoteControlRequest::stage() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.stage)
  return _internal_stage();
}
inline void SSL_RefereeRemoteControlRequest::_internal_set_stage(::SSL_Referee_Stage value) {
  assert(::SSL_Referee_Stage_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  stage_ = value;
}
inline void SSL_RefereeRemoteControlRequest::set_stage(::SSL_Referee_Stage value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.stage)
}

// optional .SSL_Referee.Command command = 3;
inline bool SSL_RefereeRemoteControlRequest::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SSL_RefereeRemoteControlRequest::has_command() const {
  return _internal_has_command();
}
inline void SSL_RefereeRemoteControlRequest::clear_command() {
  command_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::SSL_Referee_Command SSL_RefereeRemoteControlRequest::_internal_command() const {
  return static_cast< ::SSL_Referee_Command >(command_);
}
inline ::SSL_Referee_Command SSL_RefereeRemoteControlRequest::command() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.command)
  return _internal_command();
}
inline void SSL_RefereeRemoteControlRequest::_internal_set_command(::SSL_Referee_Command value) {
  assert(::SSL_Referee_Command_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  command_ = value;
}
inline void SSL_RefereeRemoteControlRequest::set_command(::SSL_Referee_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.command)
}

// optional .SSL_Referee.Point designated_position = 4;
inline bool SSL_RefereeRemoteControlRequest::_internal_has_designated_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || designated_position_ != nullptr);
  return value;
}
inline bool SSL_RefereeRemoteControlRequest::has_designated_position() const {
  return _internal_has_designated_position();
}
inline const ::SSL_Referee_Point& SSL_RefereeRemoteControlRequest::_internal_designated_position() const {
  const ::SSL_Referee_Point* p = designated_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee_Point*>(
      &::_SSL_Referee_Point_default_instance_);
}
inline const ::SSL_Referee_Point& SSL_RefereeRemoteControlRequest::designated_position() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.designated_position)
  return _internal_designated_position();
}
inline void SSL_RefereeRemoteControlRequest::unsafe_arena_set_allocated_designated_position(
    ::SSL_Referee_Point* designated_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(designated_position_);
  }
  designated_position_ = designated_position;
  if (designated_position) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_RefereeRemoteControlRequest.designated_position)
}
inline ::SSL_Referee_Point* SSL_RefereeRemoteControlRequest::release_designated_position() {
  auto temp = unsafe_arena_release_designated_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SSL_Referee_Point* SSL_RefereeRemoteControlRequest::unsafe_arena_release_designated_position() {
  // @@protoc_insertion_point(field_release:SSL_RefereeRemoteControlRequest.designated_position)
  _has_bits_[0] &= ~0x00000002u;
  ::SSL_Referee_Point* temp = designated_position_;
  designated_position_ = nullptr;
  return temp;
}
inline ::SSL_Referee_Point* SSL_RefereeRemoteControlRequest::_internal_mutable_designated_position() {
  _has_bits_[0] |= 0x00000002u;
  if (designated_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee_Point>(GetArena());
    designated_position_ = p;
  }
  return designated_position_;
}
inline ::SSL_Referee_Point* SSL_RefereeRemoteControlRequest::mutable_designated_position() {
  // @@protoc_insertion_point(field_mutable:SSL_RefereeRemoteControlRequest.designated_position)
  return _internal_mutable_designated_position();
}
inline void SSL_RefereeRemoteControlRequest::set_allocated_designated_position(::SSL_Referee_Point* designated_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(designated_position_);
  }
  if (designated_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(designated_position)->GetArena();
    if (message_arena != submessage_arena) {
      designated_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, designated_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  designated_position_ = designated_position;
  // @@protoc_insertion_point(field_set_allocated:SSL_RefereeRemoteControlRequest.designated_position)
}

// optional .SSL_RefereeRemoteControlRequest.CardInfo card = 5;
inline bool SSL_RefereeRemoteControlRequest::_internal_has_card() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || card_ != nullptr);
  return value;
}
inline bool SSL_RefereeRemoteControlRequest::has_card() const {
  return _internal_has_card();
}
inline void SSL_RefereeRemoteControlRequest::clear_card() {
  if (card_ != nullptr) card_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::SSL_RefereeRemoteControlRequest_CardInfo& SSL_RefereeRemoteControlRequest::_internal_card() const {
  const ::SSL_RefereeRemoteControlRequest_CardInfo* p = card_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_RefereeRemoteControlRequest_CardInfo*>(
      &::_SSL_RefereeRemoteControlRequest_CardInfo_default_instance_);
}
inline const ::SSL_RefereeRemoteControlRequest_CardInfo& SSL_RefereeRemoteControlRequest::card() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.card)
  return _internal_card();
}
inline void SSL_RefereeRemoteControlRequest::unsafe_arena_set_allocated_card(
    ::SSL_RefereeRemoteControlRequest_CardInfo* card) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(card_);
  }
  card_ = card;
  if (card) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_RefereeRemoteControlRequest.card)
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo* SSL_RefereeRemoteControlRequest::release_card() {
  auto temp = unsafe_arena_release_card();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo* SSL_RefereeRemoteControlRequest::unsafe_arena_release_card() {
  // @@protoc_insertion_point(field_release:SSL_RefereeRemoteControlRequest.card)
  _has_bits_[0] &= ~0x00000004u;
  ::SSL_RefereeRemoteControlRequest_CardInfo* temp = card_;
  card_ = nullptr;
  return temp;
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo* SSL_RefereeRemoteControlRequest::_internal_mutable_card() {
  _has_bits_[0] |= 0x00000004u;
  if (card_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_RefereeRemoteControlRequest_CardInfo>(GetArena());
    card_ = p;
  }
  return card_;
}
inline ::SSL_RefereeRemoteControlRequest_CardInfo* SSL_RefereeRemoteControlRequest::mutable_card() {
  // @@protoc_insertion_point(field_mutable:SSL_RefereeRemoteControlRequest.card)
  return _internal_mutable_card();
}
inline void SSL_RefereeRemoteControlRequest::set_allocated_card(::SSL_RefereeRemoteControlRequest_CardInfo* card) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete card_;
  }
  if (card) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(card);
    if (message_arena != submessage_arena) {
      card = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, card, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  card_ = card;
  // @@protoc_insertion_point(field_set_allocated:SSL_RefereeRemoteControlRequest.card)
}

// optional uint32 last_command_counter = 6;
inline bool SSL_RefereeRemoteControlRequest::_internal_has_last_command_counter() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SSL_RefereeRemoteControlRequest::has_last_command_counter() const {
  return _internal_has_last_command_counter();
}
inline void SSL_RefereeRemoteControlRequest::clear_last_command_counter() {
  last_command_counter_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_RefereeRemoteControlRequest::_internal_last_command_counter() const {
  return last_command_counter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_RefereeRemoteControlRequest::last_command_counter() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.last_command_counter)
  return _internal_last_command_counter();
}
inline void SSL_RefereeRemoteControlRequest::_internal_set_last_command_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  last_command_counter_ = value;
}
inline void SSL_RefereeRemoteControlRequest::set_last_command_counter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_command_counter(value);
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.last_command_counter)
}

// optional string implementation_id = 7;
inline bool SSL_RefereeRemoteControlRequest::_internal_has_implementation_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_RefereeRemoteControlRequest::has_implementation_id() const {
  return _internal_has_implementation_id();
}
inline void SSL_RefereeRemoteControlRequest::clear_implementation_id() {
  implementation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SSL_RefereeRemoteControlRequest::implementation_id() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.implementation_id)
  return _internal_implementation_id();
}
inline void SSL_RefereeRemoteControlRequest::set_implementation_id(const std::string& value) {
  _internal_set_implementation_id(value);
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlRequest.implementation_id)
}
inline std::string* SSL_RefereeRemoteControlRequest::mutable_implementation_id() {
  // @@protoc_insertion_point(field_mutable:SSL_RefereeRemoteControlRequest.implementation_id)
  return _internal_mutable_implementation_id();
}
inline const std::string& SSL_RefereeRemoteControlRequest::_internal_implementation_id() const {
  return implementation_id_.Get();
}
inline void SSL_RefereeRemoteControlRequest::_internal_set_implementation_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  implementation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SSL_RefereeRemoteControlRequest::set_implementation_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  implementation_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SSL_RefereeRemoteControlRequest.implementation_id)
}
inline void SSL_RefereeRemoteControlRequest::set_implementation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  implementation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SSL_RefereeRemoteControlRequest.implementation_id)
}
inline void SSL_RefereeRemoteControlRequest::set_implementation_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  implementation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SSL_RefereeRemoteControlRequest.implementation_id)
}
inline std::string* SSL_RefereeRemoteControlRequest::_internal_mutable_implementation_id() {
  _has_bits_[0] |= 0x00000001u;
  return implementation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SSL_RefereeRemoteControlRequest::release_implementation_id() {
  // @@protoc_insertion_point(field_release:SSL_RefereeRemoteControlRequest.implementation_id)
  if (!_internal_has_implementation_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return implementation_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SSL_RefereeRemoteControlRequest::set_allocated_implementation_id(std::string* implementation_id) {
  if (implementation_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  implementation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), implementation_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SSL_RefereeRemoteControlRequest.implementation_id)
}
inline std::string* SSL_RefereeRemoteControlRequest::unsafe_arena_release_implementation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SSL_RefereeRemoteControlRequest.implementation_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return implementation_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SSL_RefereeRemoteControlRequest::unsafe_arena_set_allocated_implementation_id(
    std::string* implementation_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (implementation_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  implementation_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      implementation_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_RefereeRemoteControlRequest.implementation_id)
}

// optional .SSL_Referee_Game_Event gameEvent = 8;
inline bool SSL_RefereeRemoteControlRequest::_internal_has_gameevent() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || gameevent_ != nullptr);
  return value;
}
inline bool SSL_RefereeRemoteControlRequest::has_gameevent() const {
  return _internal_has_gameevent();
}
inline const ::SSL_Referee_Game_Event& SSL_RefereeRemoteControlRequest::_internal_gameevent() const {
  const ::SSL_Referee_Game_Event* p = gameevent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee_Game_Event*>(
      &::_SSL_Referee_Game_Event_default_instance_);
}
inline const ::SSL_Referee_Game_Event& SSL_RefereeRemoteControlRequest::gameevent() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlRequest.gameEvent)
  return _internal_gameevent();
}
inline void SSL_RefereeRemoteControlRequest::unsafe_arena_set_allocated_gameevent(
    ::SSL_Referee_Game_Event* gameevent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameevent_);
  }
  gameevent_ = gameevent;
  if (gameevent) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_RefereeRemoteControlRequest.gameEvent)
}
inline ::SSL_Referee_Game_Event* SSL_RefereeRemoteControlRequest::release_gameevent() {
  auto temp = unsafe_arena_release_gameevent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SSL_Referee_Game_Event* SSL_RefereeRemoteControlRequest::unsafe_arena_release_gameevent() {
  // @@protoc_insertion_point(field_release:SSL_RefereeRemoteControlRequest.gameEvent)
  _has_bits_[0] &= ~0x00000008u;
  ::SSL_Referee_Game_Event* temp = gameevent_;
  gameevent_ = nullptr;
  return temp;
}
inline ::SSL_Referee_Game_Event* SSL_RefereeRemoteControlRequest::_internal_mutable_gameevent() {
  _has_bits_[0] |= 0x00000008u;
  if (gameevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee_Game_Event>(GetArena());
    gameevent_ = p;
  }
  return gameevent_;
}
inline ::SSL_Referee_Game_Event* SSL_RefereeRemoteControlRequest::mutable_gameevent() {
  // @@protoc_insertion_point(field_mutable:SSL_RefereeRemoteControlRequest.gameEvent)
  return _internal_mutable_gameevent();
}
inline void SSL_RefereeRemoteControlRequest::set_allocated_gameevent(::SSL_Referee_Game_Event* gameevent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameevent_);
  }
  if (gameevent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gameevent)->GetArena();
    if (message_arena != submessage_arena) {
      gameevent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameevent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gameevent_ = gameevent;
  // @@protoc_insertion_point(field_set_allocated:SSL_RefereeRemoteControlRequest.gameEvent)
}

// -------------------------------------------------------------------

// SSL_RefereeRemoteControlReply

// required uint32 message_id = 1;
inline bool SSL_RefereeRemoteControlReply::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_RefereeRemoteControlReply::has_message_id() const {
  return _internal_has_message_id();
}
inline void SSL_RefereeRemoteControlReply::clear_message_id() {
  message_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_RefereeRemoteControlReply::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SSL_RefereeRemoteControlReply::message_id() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlReply.message_id)
  return _internal_message_id();
}
inline void SSL_RefereeRemoteControlReply::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  message_id_ = value;
}
inline void SSL_RefereeRemoteControlReply::set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlReply.message_id)
}

// required .SSL_RefereeRemoteControlReply.Outcome outcome = 2;
inline bool SSL_RefereeRemoteControlReply::_internal_has_outcome() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_RefereeRemoteControlReply::has_outcome() const {
  return _internal_has_outcome();
}
inline void SSL_RefereeRemoteControlReply::clear_outcome() {
  outcome_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::_internal_outcome() const {
  return static_cast< ::SSL_RefereeRemoteControlReply_Outcome >(outcome_);
}
inline ::SSL_RefereeRemoteControlReply_Outcome SSL_RefereeRemoteControlReply::outcome() const {
  // @@protoc_insertion_point(field_get:SSL_RefereeRemoteControlReply.outcome)
  return _internal_outcome();
}
inline void SSL_RefereeRemoteControlReply::_internal_set_outcome(::SSL_RefereeRemoteControlReply_Outcome value) {
  assert(::SSL_RefereeRemoteControlReply_Outcome_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  outcome_ = value;
}
inline void SSL_RefereeRemoteControlReply::set_outcome(::SSL_RefereeRemoteControlReply_Outcome value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:SSL_RefereeRemoteControlReply.outcome)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SSL_RefereeRemoteControlRequest_CardInfo_CardType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_RefereeRemoteControlRequest_CardInfo_CardType>() {
  return ::SSL_RefereeRemoteControlRequest_CardInfo_CardType_descriptor();
}
template <> struct is_proto_enum< ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam>() {
  return ::SSL_RefereeRemoteControlRequest_CardInfo_CardTeam_descriptor();
}
template <> struct is_proto_enum< ::SSL_RefereeRemoteControlReply_Outcome> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_RefereeRemoteControlReply_Outcome>() {
  return ::SSL_RefereeRemoteControlReply_Outcome_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rcon_2eproto
