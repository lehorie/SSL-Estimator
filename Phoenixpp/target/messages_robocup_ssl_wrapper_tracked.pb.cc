// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_wrapper_tracked.proto

#include "messages_robocup_ssl_wrapper_tracked.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrackedFrame_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto;
class TrackerWrapperPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackerWrapperPacket> _instance;
} _TrackerWrapperPacket_default_instance_;
static void InitDefaultsscc_info_TrackerWrapperPacket_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrackerWrapperPacket_default_instance_;
    new (ptr) ::TrackerWrapperPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TrackerWrapperPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackerWrapperPacket_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrackerWrapperPacket_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto}, {
      &scc_info_TrackedFrame_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TrackerWrapperPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TrackerWrapperPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TrackerWrapperPacket, uuid_),
  PROTOBUF_FIELD_OFFSET(::TrackerWrapperPacket, source_name_),
  PROTOBUF_FIELD_OFFSET(::TrackerWrapperPacket, tracked_frame_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::TrackerWrapperPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrackerWrapperPacket_default_instance_),
};

const char descriptor_table_protodef_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*messages_robocup_ssl_wrapper_tracked.p"
  "roto\032,messages_robocup_ssl_detection_tra"
  "cked.proto\"_\n\024TrackerWrapperPacket\022\014\n\004uu"
  "id\030\001 \002(\t\022\023\n\013source_name\030\002 \001(\t\022$\n\rtracked"
  "_frame\030\003 \001(\0132\r.TrackedFrame"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto_deps[1] = {
  &::descriptor_table_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto_sccs[1] = {
  &scc_info_TrackerWrapperPacket_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto = {
  false, false, descriptor_table_protodef_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto, "messages_robocup_ssl_wrapper_tracked.proto", 187,
  &descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto_once, descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto_sccs, descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto::offsets,
  file_level_metadata_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto, 1, file_level_enum_descriptors_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto, file_level_service_descriptors_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto)), true);

// ===================================================================

void TrackerWrapperPacket::InitAsDefaultInstance() {
  ::_TrackerWrapperPacket_default_instance_._instance.get_mutable()->tracked_frame_ = const_cast< ::TrackedFrame*>(
      ::TrackedFrame::internal_default_instance());
}
class TrackerWrapperPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackerWrapperPacket>()._has_bits_);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TrackedFrame& tracked_frame(const TrackerWrapperPacket* msg);
  static void set_has_tracked_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TrackedFrame&
TrackerWrapperPacket::_Internal::tracked_frame(const TrackerWrapperPacket* msg) {
  return *msg->tracked_frame_;
}
void TrackerWrapperPacket::clear_tracked_frame() {
  if (tracked_frame_ != nullptr) tracked_frame_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
TrackerWrapperPacket::TrackerWrapperPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TrackerWrapperPacket)
}
TrackerWrapperPacket::TrackerWrapperPacket(const TrackerWrapperPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_name()) {
    source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source_name(),
      GetArena());
  }
  if (from._internal_has_tracked_frame()) {
    tracked_frame_ = new ::TrackedFrame(*from.tracked_frame_);
  } else {
    tracked_frame_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TrackerWrapperPacket)
}

void TrackerWrapperPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackerWrapperPacket_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tracked_frame_ = nullptr;
}

TrackerWrapperPacket::~TrackerWrapperPacket() {
  // @@protoc_insertion_point(destructor:TrackerWrapperPacket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackerWrapperPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tracked_frame_;
}

void TrackerWrapperPacket::ArenaDtor(void* object) {
  TrackerWrapperPacket* _this = reinterpret_cast< TrackerWrapperPacket* >(object);
  (void)_this;
}
void TrackerWrapperPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackerWrapperPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackerWrapperPacket& TrackerWrapperPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackerWrapperPacket_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto.base);
  return *internal_default_instance();
}


void TrackerWrapperPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackerWrapperPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      source_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tracked_frame_ != nullptr);
      tracked_frame_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackerWrapperPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TrackerWrapperPacket.uuid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string source_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TrackerWrapperPacket.source_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TrackedFrame tracked_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracked_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackerWrapperPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrackerWrapperPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TrackerWrapperPacket.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // optional string source_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TrackerWrapperPacket.source_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_name(), target);
  }

  // optional .TrackedFrame tracked_frame = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tracked_frame(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackerWrapperPacket)
  return target;
}

size_t TrackerWrapperPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackerWrapperPacket)
  size_t total_size = 0;

  // required string uuid = 1;
  if (_internal_has_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string source_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_name());
    }

    // optional .TrackedFrame tracked_frame = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracked_frame_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackerWrapperPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrackerWrapperPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackerWrapperPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackerWrapperPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrackerWrapperPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrackerWrapperPacket)
    MergeFrom(*source);
  }
}

void TrackerWrapperPacket::MergeFrom(const TrackerWrapperPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrackerWrapperPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_source_name(from._internal_source_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tracked_frame()->::TrackedFrame::MergeFrom(from._internal_tracked_frame());
    }
  }
}

void TrackerWrapperPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrackerWrapperPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerWrapperPacket::CopyFrom(const TrackerWrapperPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackerWrapperPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerWrapperPacket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_tracked_frame()) {
    if (!tracked_frame_->IsInitialized()) return false;
  }
  return true;
}

void TrackerWrapperPacket::InternalSwap(TrackerWrapperPacket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_name_.Swap(&other->source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(tracked_frame_, other->tracked_frame_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackerWrapperPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TrackerWrapperPacket* Arena::CreateMaybeMessage< ::TrackerWrapperPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrackerWrapperPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
