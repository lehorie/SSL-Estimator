// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_wrapper_tracked.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "messages_robocup_ssl_detection_tracked.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto;
class TrackerWrapperPacket;
class TrackerWrapperPacketDefaultTypeInternal;
extern TrackerWrapperPacketDefaultTypeInternal _TrackerWrapperPacket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TrackerWrapperPacket* Arena::CreateMaybeMessage<::TrackerWrapperPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TrackerWrapperPacket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrackerWrapperPacket) */ {
 public:
  inline TrackerWrapperPacket() : TrackerWrapperPacket(nullptr) {};
  virtual ~TrackerWrapperPacket();

  TrackerWrapperPacket(const TrackerWrapperPacket& from);
  TrackerWrapperPacket(TrackerWrapperPacket&& from) noexcept
    : TrackerWrapperPacket() {
    *this = ::std::move(from);
  }

  inline TrackerWrapperPacket& operator=(const TrackerWrapperPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackerWrapperPacket& operator=(TrackerWrapperPacket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackerWrapperPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackerWrapperPacket* internal_default_instance() {
    return reinterpret_cast<const TrackerWrapperPacket*>(
               &_TrackerWrapperPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackerWrapperPacket& a, TrackerWrapperPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackerWrapperPacket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackerWrapperPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackerWrapperPacket* New() const final {
    return CreateMaybeMessage<TrackerWrapperPacket>(nullptr);
  }

  TrackerWrapperPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackerWrapperPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackerWrapperPacket& from);
  void MergeFrom(const TrackerWrapperPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackerWrapperPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrackerWrapperPacket";
  }
  protected:
  explicit TrackerWrapperPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto);
    return ::descriptor_table_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kSourceNameFieldNumber = 2,
    kTrackedFrameFieldNumber = 3,
  };
  // required string uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional string source_name = 2;
  bool has_source_name() const;
  private:
  bool _internal_has_source_name() const;
  public:
  void clear_source_name();
  const std::string& source_name() const;
  void set_source_name(const std::string& value);
  void set_source_name(std::string&& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  std::string* mutable_source_name();
  std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_name(
      std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // optional .TrackedFrame tracked_frame = 3;
  bool has_tracked_frame() const;
  private:
  bool _internal_has_tracked_frame() const;
  public:
  void clear_tracked_frame();
  const ::TrackedFrame& tracked_frame() const;
  ::TrackedFrame* release_tracked_frame();
  ::TrackedFrame* mutable_tracked_frame();
  void set_allocated_tracked_frame(::TrackedFrame* tracked_frame);
  private:
  const ::TrackedFrame& _internal_tracked_frame() const;
  ::TrackedFrame* _internal_mutable_tracked_frame();
  public:
  void unsafe_arena_set_allocated_tracked_frame(
      ::TrackedFrame* tracked_frame);
  ::TrackedFrame* unsafe_arena_release_tracked_frame();

  // @@protoc_insertion_point(class_scope:TrackerWrapperPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::TrackedFrame* tracked_frame_;
  friend struct ::TableStruct_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackerWrapperPacket

// required string uuid = 1;
inline bool TrackerWrapperPacket::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackerWrapperPacket::has_uuid() const {
  return _internal_has_uuid();
}
inline void TrackerWrapperPacket::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackerWrapperPacket::uuid() const {
  // @@protoc_insertion_point(field_get:TrackerWrapperPacket.uuid)
  return _internal_uuid();
}
inline void TrackerWrapperPacket::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:TrackerWrapperPacket.uuid)
}
inline std::string* TrackerWrapperPacket::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:TrackerWrapperPacket.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& TrackerWrapperPacket::_internal_uuid() const {
  return uuid_.Get();
}
inline void TrackerWrapperPacket::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrackerWrapperPacket::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrackerWrapperPacket.uuid)
}
inline void TrackerWrapperPacket::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrackerWrapperPacket.uuid)
}
inline void TrackerWrapperPacket::set_uuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrackerWrapperPacket.uuid)
}
inline std::string* TrackerWrapperPacket::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrackerWrapperPacket::release_uuid() {
  // @@protoc_insertion_point(field_release:TrackerWrapperPacket.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackerWrapperPacket::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrackerWrapperPacket.uuid)
}
inline std::string* TrackerWrapperPacket::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TrackerWrapperPacket.uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrackerWrapperPacket::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrackerWrapperPacket.uuid)
}

// optional string source_name = 2;
inline bool TrackerWrapperPacket::_internal_has_source_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackerWrapperPacket::has_source_name() const {
  return _internal_has_source_name();
}
inline void TrackerWrapperPacket::clear_source_name() {
  source_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrackerWrapperPacket::source_name() const {
  // @@protoc_insertion_point(field_get:TrackerWrapperPacket.source_name)
  return _internal_source_name();
}
inline void TrackerWrapperPacket::set_source_name(const std::string& value) {
  _internal_set_source_name(value);
  // @@protoc_insertion_point(field_set:TrackerWrapperPacket.source_name)
}
inline std::string* TrackerWrapperPacket::mutable_source_name() {
  // @@protoc_insertion_point(field_mutable:TrackerWrapperPacket.source_name)
  return _internal_mutable_source_name();
}
inline const std::string& TrackerWrapperPacket::_internal_source_name() const {
  return source_name_.Get();
}
inline void TrackerWrapperPacket::_internal_set_source_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrackerWrapperPacket::set_source_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TrackerWrapperPacket.source_name)
}
inline void TrackerWrapperPacket::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TrackerWrapperPacket.source_name)
}
inline void TrackerWrapperPacket::set_source_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TrackerWrapperPacket.source_name)
}
inline std::string* TrackerWrapperPacket::_internal_mutable_source_name() {
  _has_bits_[0] |= 0x00000002u;
  return source_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrackerWrapperPacket::release_source_name() {
  // @@protoc_insertion_point(field_release:TrackerWrapperPacket.source_name)
  if (!_internal_has_source_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return source_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackerWrapperPacket::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TrackerWrapperPacket.source_name)
}
inline std::string* TrackerWrapperPacket::unsafe_arena_release_source_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TrackerWrapperPacket.source_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return source_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrackerWrapperPacket::unsafe_arena_set_allocated_source_name(
    std::string* source_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrackerWrapperPacket.source_name)
}

// optional .TrackedFrame tracked_frame = 3;
inline bool TrackerWrapperPacket::_internal_has_tracked_frame() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tracked_frame_ != nullptr);
  return value;
}
inline bool TrackerWrapperPacket::has_tracked_frame() const {
  return _internal_has_tracked_frame();
}
inline const ::TrackedFrame& TrackerWrapperPacket::_internal_tracked_frame() const {
  const ::TrackedFrame* p = tracked_frame_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TrackedFrame*>(
      &::_TrackedFrame_default_instance_);
}
inline const ::TrackedFrame& TrackerWrapperPacket::tracked_frame() const {
  // @@protoc_insertion_point(field_get:TrackerWrapperPacket.tracked_frame)
  return _internal_tracked_frame();
}
inline void TrackerWrapperPacket::unsafe_arena_set_allocated_tracked_frame(
    ::TrackedFrame* tracked_frame) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_frame_);
  }
  tracked_frame_ = tracked_frame;
  if (tracked_frame) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrackerWrapperPacket.tracked_frame)
}
inline ::TrackedFrame* TrackerWrapperPacket::release_tracked_frame() {
  auto temp = unsafe_arena_release_tracked_frame();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TrackedFrame* TrackerWrapperPacket::unsafe_arena_release_tracked_frame() {
  // @@protoc_insertion_point(field_release:TrackerWrapperPacket.tracked_frame)
  _has_bits_[0] &= ~0x00000004u;
  ::TrackedFrame* temp = tracked_frame_;
  tracked_frame_ = nullptr;
  return temp;
}
inline ::TrackedFrame* TrackerWrapperPacket::_internal_mutable_tracked_frame() {
  _has_bits_[0] |= 0x00000004u;
  if (tracked_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::TrackedFrame>(GetArena());
    tracked_frame_ = p;
  }
  return tracked_frame_;
}
inline ::TrackedFrame* TrackerWrapperPacket::mutable_tracked_frame() {
  // @@protoc_insertion_point(field_mutable:TrackerWrapperPacket.tracked_frame)
  return _internal_mutable_tracked_frame();
}
inline void TrackerWrapperPacket::set_allocated_tracked_frame(::TrackedFrame* tracked_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_frame_);
  }
  if (tracked_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_frame)->GetArena();
    if (message_arena != submessage_arena) {
      tracked_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracked_frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tracked_frame_ = tracked_frame;
  // @@protoc_insertion_point(field_set_allocated:TrackerWrapperPacket.tracked_frame)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto
